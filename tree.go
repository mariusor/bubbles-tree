package tree

import (
	"fmt"
	"strings"

	"github.com/charmbracelet/bubbles/key"
	"github.com/charmbracelet/bubbles/viewport"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

// NodeState is used for passing information from a Treeish element to the view itself
type NodeState int

const (
	EmptyPadding = "   "

	BoxDrawingsDownAndRight     = " ┌─"
	BoxDrawingsVertical         = " │ "
	BoxDrawingsVerticalAndRight = " ├─"
	BoxDrawingsUpAndRight       = " └─"
	BoxDrawingsHorizontal       = "─"

	SquaredPlus     = "⊞"
	SquaredMinus    = "⊟"
	RightwardsArrow = "→"
	Ellipsis        = "…"

	NodeError NodeState = -1
	NodeNone  NodeState = 0

	// NodeCollapsed hints that the current node is collapsed
	NodeCollapsed NodeState = 1 << iota
	NodeSelected
	// NodeCollapsible hints that the current node can be collapsed
	NodeCollapsible
	// NodeVisible hints that the current node is ready to be displayed
	NodeVisible
	NodeRootNode
	// NodeSingleChild shows the node to be a single node in it's parent children list
	NodeSingleChild
	// NodeLastChild shows the node to be the last in the children list
	NodeLastChild
)

var (
	defaultStyle         = lipgloss.Style{}
	defaultSelectedStyle = defaultStyle.Reverse(true)
)

type Node interface {
	Parent() Node
	Name() string
	Children() Nodes
	State() NodeState
	SetState(NodeState)
}

// MoveUp moves the selection up by any number of row.
// It can not go above the first row.
func (m *Model) MoveUp(n int) {
	m.cursor = clamp(m.cursor-n, 0, len(visibleLines(m.tree))-1)
	m.LogFn("move %d, new pos: %d", n, m.cursor)

	if m.cursor < m.viewport.YOffset {
		m.LogFn("viewport adjustment %d", n)
		m.viewport.LineUp(n)
	}
	m.setCurrentNode()
	m.UpdateViewport()
}

// MoveDown moves the selection down by any number of row.
// It can not go below the last row.
func (m *Model) MoveDown(n int) {
	m.cursor = clamp(m.cursor+n, 0, len(visibleLines(m.tree))-1)
	m.LogFn("move %d, new pos: %d", n, m.cursor)

	if m.cursor > (m.viewport.YOffset + (m.viewport.Height - 1)) {
		m.LogFn("viewport adjustment %d", n)
		m.viewport.LineDown(n)
	}
	m.setCurrentNode()
	m.UpdateViewport()
}

// GotoTop moves the selection to the first row.
func (m *Model) GotoTop() {
	m.MoveUp(m.cursor)
	m.setCurrentNode()
}

// GotoBottom moves the selection to the last row.
func (m *Model) GotoBottom() {
	m.MoveDown(m.tree.Len())
	m.setCurrentNode()
}

type Nodes []Node

func (n Nodes) Len() int {
	l := 0
	for _, node := range n {
		l++
		if node.Children() != nil {
			l += node.Children().Len()
		}
	}
	return l
}

func (n Nodes) at(i int) Node {
	j := 0
	for _, p := range n {
		if p.State()&NodeVisible != NodeVisible {
			continue
		}
		if j == i {
			return p
		}
		if p.Children() != nil && p.State()&NodeCollapsed != NodeCollapsed {
			if nn := p.Children().at(i - j - 1); nn != nil {
				return nn
			}
			j += len(visibleLines(p.Children()))
		}
		j++
	}
	return nil
}

func (n Nodes) GoString() string {
	s := strings.Builder{}
	for i, nn := range n {
		s.WriteString(fmt.Sprintf(" %d => %#v\n", i, nn))
	}
	return s.String()
}

// KeyMap defines keybindings.
// It satisfies to the github.com/charm/bubbles/help.KeyMap interface, which is used to render the menu.
type KeyMap struct {
	LineUp       key.Binding
	LineDown     key.Binding
	PageUp       key.Binding
	PageDown     key.Binding
	HalfPageUp   key.Binding
	HalfPageDown key.Binding
	GotoTop      key.Binding
	GotoBottom   key.Binding

	Expand  key.Binding
	Advance key.Binding
	Parent  key.Binding
}

// DefaultKeyMap returns a default set of keybindings.
func DefaultKeyMap() KeyMap {
	return KeyMap{
		LineUp: key.NewBinding(
			key.WithKeys("up", "k"),
			key.WithHelp("↑/k", "up"),
		),
		LineDown: key.NewBinding(
			key.WithKeys("down", "j"),
			key.WithHelp("↓/j", "down"),
		),
		PageUp: key.NewBinding(
			key.WithKeys("b", "pgup"),
			key.WithHelp("b/pgup", "page up"),
		),
		PageDown: key.NewBinding(
			key.WithKeys("f", "pgdown", " "),
			key.WithHelp("f/pgdn", "page down"),
		),
		HalfPageUp: key.NewBinding(
			key.WithKeys("u", "ctrl+u"),
			key.WithHelp("u", "½ page up"),
		),
		HalfPageDown: key.NewBinding(
			key.WithKeys("d", "ctrl+d"),
			key.WithHelp("d", "½ page down"),
		),
		GotoTop: key.NewBinding(
			key.WithKeys("home", "g"),
			key.WithHelp("g/home", "go to start"),
		),
		GotoBottom: key.NewBinding(
			key.WithKeys("end", "G"),
			key.WithHelp("G/end", "go to end"),
		),
		Expand: key.NewBinding(
			key.WithKeys("o"),
			key.WithHelp("o", "toggle expand for current node"),
		),
		Advance: key.NewBinding(
			key.WithKeys("enter"),
			key.WithHelp("enter", "open this node"),
		),
		Parent: key.NewBinding(
			key.WithKeys("backspace"),
			key.WithHelp("backspace", "go back to the parent node"),
		),
	}
}

// Styles contains style definitions for this list component. By default, these
// values are generated by DefaultStyles.
type Styles struct {
	Line     lipgloss.Style
	Ellipsis lipgloss.Style
	Selected lipgloss.Style
}

// DefaultStyles returns a set of default style definitions for this table.
func DefaultStyles() Styles {
	return Styles{
		Line:     defaultStyle,
		Ellipsis: defaultStyle,
		Selected: defaultSelectedStyle,
	}
}

// SetStyles sets the table styles.
func (m *Model) SetStyles(s Styles) {
	m.styles = s
	m.UpdateViewport()
}

func (m *Model) setCurrentNode() {
	current := m.tree.at(m.cursor)
	current.SetState(current.State() | NodeSelected)
}

// UpdateViewport updates the list content based on the previously defined
// columns and rows.
func (m *Model) UpdateViewport() {
	renderedRows := m.render()
	m.viewport.SetContent(
		lipgloss.JoinVertical(lipgloss.Left, renderedRows...),
	)
}

type logFn func(s string, args ...interface{})

func emptyLog(_ string, _ ...interface{}) {}

// Model is the Bubble Tea model for this user interface.
type Model struct {
	KeyMap   KeyMap
	viewport viewport.Model

	cursor int
	focus  bool
	styles Styles

	tree  Nodes
	LogFn logFn
}

func New(t Nodes) Model {
	return Model{
		tree: t,

		viewport: viewport.New(0, 1),
		focus:    true,

		KeyMap: DefaultKeyMap(),
		styles: DefaultStyles(),
		LogFn:  emptyLog,
	}
}

func (m *Model) Children() Nodes {
	return m.tree
}

// ToggleExpand toggles the expanded state of the node pointed at by m.cursor
func (m *Model) ToggleExpand() error {
	n := m.tree.at(m.cursor)
	n.SetState(n.State() ^ NodeCollapsed)
	m.setCurrentNode()
	m.UpdateViewport()
	return nil
}

// Parent moves the whole Treeish to the parent node
func (m *Model) Parent() error {
	n := m.tree.at(0).Parent()
	if n == nil {
		return fmt.Errorf("invalid parent node")
	}
	m.LogFn("Going to parent: %s", n)

	m.tree = n.Children()

	n.SetState(n.State() | NodeCollapsed)
	m.GotoTop()

	m.UpdateViewport()
	return nil
}

// Advance moves the whole Treeish to the node m.cursor points at
func (m *Model) Advance() error {
	n := m.tree.at(m.cursor)
	if n == nil {
		return fmt.Errorf("invalid node at pos %d", m.cursor)
	}

	m.LogFn("Advancing to: %s", n)
	m.tree = n.Children()

	n.SetState(n.State() ^ NodeCollapsed)
	m.GotoTop()

	m.UpdateViewport()
	return nil
}

func visibleLines(n Nodes) Nodes {
	visible := make(Nodes, 0)
	for _, nn := range n {
		if nn.State()&NodeVisible != NodeVisible {
			continue
		}
		visible = append(visible, nn)
		if nn.State()&NodeCollapsible == NodeCollapsible && nn.State()&NodeCollapsed != NodeCollapsed {
			visible = append(visible, visibleLines(nn.Children())...)
		}
	}
	return visible
}

// SetWidth sets the width of the viewport of the table.
func (m *Model) SetWidth(w int) {
	m.viewport.Width = w
	m.UpdateViewport()
}

// SetHeight sets the height of the viewport of the table.
func (m *Model) SetHeight(h int) {
	m.viewport.Height = h
	m.UpdateViewport()
}

// Height returns the viewport height of the table.
func (m *Model) Height() int {
	return m.viewport.Height
}

// Width returns the viewport width of the table.
func (m *Model) Width() int {
	return m.viewport.Width
}

// Cursor returns the index of the selected row.
func (m *Model) Cursor() int {
	return m.cursor
}

type Msg string

func (m *Model) init() tea.Msg {
	return Msg("initialized")
}

func (m *Model) Init() tea.Cmd {
	return m.init
}

// Focused returns the focus state of the table.
func (m *Model) Focused() bool {
	return m.focus
}

// Focus focusses the table, allowing the user to move around the rows and
// interact.
func (m *Model) Focus() {
	m.focus = true
	m.UpdateViewport()
}

// Blur blurs the table, preventing selection or movement.
func (m *Model) Blur() {
	m.focus = false
	m.UpdateViewport()
}

// Update is the Tea update function which binds keystrokes to pagination.
func (m *Model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	if !m.focus {
		return m, nil
	}

	var err error

	switch msg := msg.(type) {
	case Msg:
		m.setCurrentNode()
		m.UpdateViewport()
	case tea.WindowSizeMsg:
		m.SetHeight(msg.Height)
		m.SetWidth(msg.Width)
		m.setCurrentNode()
		m.UpdateViewport()
	case tea.KeyMsg:
		switch {
		case key.Matches(msg, m.KeyMap.Expand):
			err = m.ToggleExpand()
		case key.Matches(msg, m.KeyMap.Advance):
			err = m.Advance()
		case key.Matches(msg, m.KeyMap.Parent):
			err = m.Parent()
		case key.Matches(msg, m.KeyMap.LineUp):
			m.MoveUp(1)
		case key.Matches(msg, m.KeyMap.LineDown):
			m.MoveDown(1)
		case key.Matches(msg, m.KeyMap.PageUp):
			m.MoveUp(m.viewport.Height)
		case key.Matches(msg, m.KeyMap.PageDown):
			m.MoveDown(m.viewport.Height)
		case key.Matches(msg, m.KeyMap.HalfPageUp):
			m.MoveUp(m.viewport.Height / 2)
		case key.Matches(msg, m.KeyMap.HalfPageDown):
			m.MoveDown(m.viewport.Height / 2)
		case key.Matches(msg, m.KeyMap.LineDown):
			m.MoveDown(1)
		case key.Matches(msg, m.KeyMap.GotoTop):
			m.GotoTop()
		case key.Matches(msg, m.KeyMap.GotoBottom):
			m.GotoBottom()
		}
	}
	if err != nil {
		m.LogFn("error: %s", err)
	}
	return m, nil
}

// View renders the pagination to a string.
func (m *Model) View() string {
	return m.viewport.View()
}

func getDepth(n Node) int {
	d := 0
	for {
		if n == nil || n.Parent() == nil {
			break
		}
		d++
		n = n.Parent()
	}
	return d
}

func getTreeSymbolForPos(n Node, pos, maxDepth int) string {
	if !showTreeSymbolAtPos(n, pos, maxDepth) {
		return EmptyPadding
	}
	if pos < maxDepth {
		return BoxDrawingsVertical
	}
	hints := n.State()
	if hints&NodeLastChild == NodeLastChild {
		return BoxDrawingsUpAndRight
	} else if hints&NodeSingleChild == NodeSingleChild {
		return BoxDrawingsUpAndRight
	}
	return BoxDrawingsVerticalAndRight
}

func showTreeSymbolAtPos(n Node, pos, maxDepth int) bool {
	if n == nil {
		return false
	}
	if pos > maxDepth {
		//panic("We shouldn't try to compute tree symbols for a position larger than the current node's parent depth")
		return false
	}
	if maxDepth == pos {
		return true
	}
	parentInPos := maxDepth - pos
	for i := 0; i < parentInPos; i++ {
		if n = n.Parent(); n == nil {
			return false
		}
	}
	return !(n.State()&NodeSingleChild == NodeSingleChild || n.State()&NodeLastChild == NodeLastChild)
}

func drawTreeElementsForNode(t Node) string {
	maxDepth := getDepth(t)

	treeSymbolsPrefix := strings.Builder{}
	for i := 0; i <= maxDepth; i++ {
		treeSymbolsPrefix.WriteString(getTreeSymbolForPos(t, i, maxDepth))
	}
	return treeSymbolsPrefix.String()
}

func (m *Model) renderNode(t Node) string {
	style := defaultStyle

	prefix := ""
	annotation := ""

	name := t.Name()
	hints := t.State()

	if hints&NodeCollapsible == NodeCollapsible {
		annotation = SquaredMinus
		if hints&NodeCollapsed == NodeCollapsed {
			annotation = SquaredPlus
		}
	}

	prefix = fmt.Sprintf("%s %-2s", drawTreeElementsForNode(t), annotation)

	name = ellipsize(name, m.viewport.Width-strings.Count(prefix, ""))
	t.SetState(hints)

	render := m.styles.Line.Width(m.Width()).Render
	if hints&NodeSelected == NodeSelected {
		render = m.styles.Selected.Width(m.Width()).Render
		t.SetState(hints ^ NodeSelected)
	}
	node := render(fmt.Sprintf("%s%s", prefix, name))

	if collapsed := hints&NodeCollapsed == NodeCollapsed; !collapsed {
		if len(t.Children()) > 0 {
			renderedChildren := m.renderNodes(t.Children())
			childNodes := make([]string, len(renderedChildren))
			for i, child := range renderedChildren {
				childNodes[i] = style.Width(m.viewport.Width).Render(child)
			}
			node = lipgloss.JoinVertical(lipgloss.Left, node, lipgloss.JoinVertical(lipgloss.Left, childNodes...))
		}
	}
	return node
}

func ellipsize(s string, w int) string {
	if w > len(s) || w < 0 {
		return s
	}
	b := strings.Builder{}
	b.WriteString(s[:w-1])
	b.WriteString(Ellipsis)
	return b.String()
}

func (m *Model) renderNodes(nl Nodes) []string {
	if len(nl) == 0 {
		return nil
	}

	firstInTree := m.tree.at(0)
	if firstInTree == nil {
		return nil
	}
	rendered := make([]string, 0)

	nodeIsSingleChild := len(nl) == 1
	for i, n := range nl {
		visible := n.State()&NodeVisible == NodeVisible
		if !visible {
			continue
		}

		var hints NodeState = 0
		if n == firstInTree {
			hints |= NodeRootNode
		}
		if len(n.Children()) > 0 {
			hints |= NodeCollapsible
		}
		if nodeIsSingleChild {
			hints |= NodeSingleChild
		}
		if i == len(nl)-1 {
			hints |= NodeLastChild
		}
		n.SetState(n.State() | hints)
		if out := m.renderNode(n); len(out) > 0 {
			rendered = append(rendered, out)
		}
	}

	return rendered
}

func (m *Model) render() []string {
	if m.viewport.Height == 0 {
		return nil
	}

	return m.renderNodes(m.Children())
}

func clamp(v, low, high int) int {
	return min(high, max(low, v))
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}
